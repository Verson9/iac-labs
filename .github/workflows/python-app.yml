# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on: [push]

jobs:
  build:
    # environment: production_environment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.3


  install-deps:
    # environment: production_environment
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
      - name: Install Poetry Deps
        run: poetry install
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/iac-labs/iac-labs/example-app/.venv
          key: ${{ runner.os }}-poetry-{{ hashFiles('poetry.lock') }}

  lint:
    # environment: production_environment
    needs: install-deps
    runs-on: ubuntu-latest
    concurrency:
      group: static-check
    defaults:
      run:
        working-directory: ./example-app

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v3
      # - name: Install Python
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: "3.10"
      # - name: Install Poetry
      #   uses: snok/install-poetry@v1.3.3
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/iac-labs/iac-labs/example-app/.venv
          key: ${{ runner.os }}-poetry-{{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-{{ hashFiles('poetry.lock') }}
      - name: Lint 
        run: poetry run task lint


  formatter:
    # environment: production_environment
    needs: install-deps
    runs-on: ubuntu-latest
    concurrency:
      group: static-check
    defaults:
      run:
        working-directory: ./example-app

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v3
      # - name: Install Python
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: "3.10"
      # - name: Install Poetry
      #   uses: snok/install-poetry@v1.3.3
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/iac-labs/iac-labs/example-app/.venv
          key: ${{ runner.os }}-poetry-{{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-{{ hashFiles('poetry.lock') }}
      - name: Format
        run: poetry run task formatter

  security:
    # environment: production_environment
    needs: install-deps
    runs-on: ubuntu-latest
    concurrency:
      group: static-check
    defaults:
      run:
        working-directory: example-app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/iac-labs/iac-labs/example-app/.venv
          key: ${{ runner.os }}-poetry-{{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-{{ hashFiles('poetry.lock') }}
      - name: Security
        run: poetry run task security


  unit-tests:
    # environment: production_environment
    needs: 
      - lint
      - formatter
      - security
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/iac-labs/iac-labs/example-app/.venv
          key: ${{ runner.os }}-poetry-{{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-{{ hashFiles('poetry.lock') }}
      - name: Test
        run: poetry run task test
