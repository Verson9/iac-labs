# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on: [push]

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest ]  

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
        shell: bash
        
    steps:
      - name: PWD
        run: echo $PWD
      - name: pwd
        run: echo $(pwd)
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-in-project: true
          virtualenvs-create: true
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: $PWD/.venv
          key: venv-${{ runner.os }}
          restore-keys: venv-${{ runner.os }}
      - name: Install Poetry Deps
        run: poetry install

  lint:    
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest ]  

    needs: build
    runs-on: ${{ matrix.os }}
    concurrency:
      group: static-check
    defaults:
      run:
        working-directory: ./example-app
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-in-project: true
          virtualenvs-create: true
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v3
        with:
          path: $PWD/.venv
          key: venv-${{ runner.os }}
          restore-keys: venv-${{ runner.os }}
      - name: Lint 
        run: poetry run task lint


  formatter:    
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest ]  
          
    needs: build
    runs-on: ${{ matrix.os }}
    concurrency:
      group: static-check
    defaults:
      run:
        working-directory: ./example-app
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-in-project: true
          virtualenvs-create: true
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v3
        with:
          path: $PWD/.venv
          key: venv-${{ runner.os }}
          restore-keys: venv-${{ runner.os }}
      - name: Format
        run: poetry run task formatter

  security:    
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest ]  
          
    needs: build
    runs-on: ${{ matrix.os }}
    concurrency:
      group: static-check
    defaults:
      run:
        working-directory: example-app
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-in-project: true
          virtualenvs-create: true
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v3
        with:
          path: $PWD/.venv
          key: venv-${{ runner.os }}
          restore-keys: venv-${{ runner.os }}
      - name: Security
        run: poetry run task security


  unit-tests:    
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest ]          
    needs: 
      - lint
      - formatter
      - security
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
        shell: bash
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-in-project: true
          virtualenvs-create: true
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v3
        with:
          path: $PWD/.venv
          key: venv-${{ runner.os }}
          restore-keys: venv-${{ runner.os }}
      - name: Test
        run: poetry run task test
